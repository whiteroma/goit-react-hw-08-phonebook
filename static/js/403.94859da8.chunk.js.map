{"version":3,"file":"static/js/403.94859da8.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/UpdateForm/UpdateForm.jsx","components/ContactListItem/ContactListItem.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormContainer = styled.form`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  gap: 10px;\n  color: midnightblue;\n\n  & > label {\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    font-size: 16px;\n    gap: 5px;\n  }\n\n  & > button {\n    align-self: center;\n    padding: 10px;\n    background-color: inherit;\n    color: white;\n    background-color: #0a49f5;\n    border-color: inherit;\n    margin-top: 20px;\n    margin-bottom: 10px;\n    font-size: 20px;\n    border-radius: 6px;\n  }\n\n`;\n","import { React } from 'react';\nimport { FormContainer } from 'components/ContactForm/ContactForm.styled';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useUpdateContactMutation } from 'ContactsApi/contactsApi';\nimport { toast } from 'react-toastify';\nimport { useEffect } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { CircularProgress } from '@mui/material';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Typography from '@mui/material/Typography';\nimport FormHelperText from '@mui/material/FormHelperText';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required('Please enter a name'),\n  number: Yup.string().required('Please enter a number'),\n});\n\nconst UpdateForm = ({ handleClose, id, name, number }) => {\n  const [updateContact, { isLoading, isError, isSuccess }] =\n    useUpdateContactMutation();\n\n  const formik = useFormik({\n    initialValues: {\n      name: name,\n      number: number,\n    },\n    validate: values => {\n      const errors = {};\n      const numberPattern = /^[0-9\\b\\s+().*-\\s++]+$/;\n      const namePattern =\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n      if (!values.number) {\n        errors.number = 'Required';\n      } else if (!numberPattern.test(values.number)) {\n        errors.number =\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n      } else if (!values.name) {\n        errors.name = 'Required';\n      } else if (!namePattern.test(values.name)) {\n        errors.name =\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\";\n      }\n\n      return errors;\n    },\n    validationSchema: validationSchema,\n    onSubmit: async (values, { resetForm }) => {\n      await updateContact({ values, id });\n      resetForm();\n      handleClose();\n    },\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      toast.success('Contact successfully updated');\n    }\n\n    if (isError) {\n      toast.error(isError.data);\n    }\n  }, [isSuccess, isError]);\n\n  return (\n    <>\n      <Typography variant=\"h6\" component=\"h2\">\n        Update contact\n      </Typography>\n      <Typography sx={{ mt: 2, color: 'rgba(0, 0, 0, 0.6)' }}>\n        To update contact please enter new name or phone number below and click\n        \"Update contact\".\n      </Typography>\n      <FormContainer onSubmit={formik.handleSubmit}>\n        <FormControl\n          error={formik.errors.name}\n          sx={{ m: 1, width: '30ch' }}\n          variant=\"standard\"\n        >\n          <InputLabel htmlFor=\"name\">Name</InputLabel>\n          <Input\n            required\n            id=\"name\"\n            type=\"text\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n          />\n          {formik.errors.name && (\n            <FormHelperText color=\"red\">{formik.errors.name}</FormHelperText>\n          )}\n        </FormControl>\n\n        <FormControl\n          error={formik.errors.number}\n          sx={{ m: 1, width: '30ch' }}\n          variant=\"standard\"\n        >\n          <InputLabel htmlFor=\"number\">Number</InputLabel>\n          <Input\n            // inputProps={{ inputMode: \"numeric\", pattern: \"[0-9]*\"}}\n            id=\"number\"\n            type=\"text\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            required\n          />\n          {formik.errors.number && (\n            <FormHelperText color=\"red\">{formik.errors.number}</FormHelperText>\n          )}\n\n          <ButtonGroup fullWidth sx={{ mt: 3 }}>\n            <LoadingButton\n              sx={{ mr: 0.3 }}\n              variant=\"contained\"\n              size=\"large\"\n              type=\"submit\"\n              loading={isLoading}\n              loadingPosition=\"center\"\n              loadingIndicator={<CircularProgress color=\"primary\" size={24} />}\n            >\n              Update\n            </LoadingButton>\n            <LoadingButton\n              variant=\"contained\"\n              size=\"large\"\n              type=\"button\"\n              onClick={handleClose}\n              loading={isLoading}\n              loadingPosition=\"center\"\n              loadingIndicator={<CircularProgress color=\"primary\" size={24} />}\n            >\n              Cancel\n            </LoadingButton>\n          </ButtonGroup>\n        </FormControl>\n      </FormContainer>\n      <Outlet />\n    </>\n  );\n};\n\nexport default UpdateForm;\n","import { useDeleteContactMutation } from 'ContactsApi/contactsApi';\nimport { toast } from 'react-toastify';\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Outlet } from 'react-router-dom';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport Avatar from '@mui/material/Avatar';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport React from 'react';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { CircularProgress } from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport UpdateForm from 'components/UpdateForm/UpdateForm';\nimport { Box } from '@mui/material';\nimport { Modal } from '@mui/material';\n\nexport default function ContactListItem({ id, name, number }) {\n  const [deleteContact, { isLoading, isSuccess, isError }] =\n    useDeleteContactMutation();\n  const [open, setOpen] = useState(false);\n  const toggle = () => setOpen(open => !open);\n\n  useEffect(() => {\n    if (isSuccess) {\n      toast.warning(`${name} removed from your contacts`);\n    }\n\n    if (isError) {\n      toast.error(isError.data);\n    }\n  }, [isError, isSuccess, name]);\n\n  return (\n    <>\n      <ListItem key={id}>\n        <ListItemAvatar>\n          <Avatar sx={{ bgcolor: 'inherit' }}>\n            <ContactPhoneIcon color=\"primary\" />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={name} secondary={number} />\n        <LoadingButton\n          size=\"small\"\n          onClick={toggle}\n          loading={isLoading}\n          loadingPosition=\"center\"\n          loadingIndicator={<CircularProgress color=\"primary\" size={16} />}\n        >\n          <EditIcon />\n        </LoadingButton>\n        <LoadingButton\n          size=\"small\"\n          onClick={() => deleteContact(id)}\n          loading={isLoading}\n          loadingPosition=\"center\"\n          loadingIndicator={<CircularProgress color=\"primary\" size={16} />}\n        >\n          <DeleteIcon />\n        </LoadingButton>\n\n        {open && (\n          <Modal open={open} onClose={toggle}>\n            <Box\n              sx={{\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                bgcolor: 'background.paper',\n                boxShadow: 24,\n                p: 4,\n              }}\n            >\n              <UpdateForm\n                handleClose={toggle}\n                id={id}\n                name={name}\n                number={number}\n              />\n              <Outlet />\n            </Box>\n          </Modal>\n        )}\n\n        <Outlet />\n      </ListItem>\n    </>\n  );\n}\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/formSlice';\nimport Box from '@mui/material/Box';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormControl from '@mui/material/FormControl';\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.contacts.query);\n\n  return (\n    <Box sx={{ '& > :not(style)': { m: 1 } }}>\n      <FormControl variant=\"standard\">\n        <InputLabel htmlFor=\"filter\">Find contacts by name</InputLabel>\n        <Input\n          id=\"filter\"\n          name=\"filter\"\n          type=\"text\"\n          value={filter}\n          onChange={e => dispatch(filterContacts(e.currentTarget.value))}\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          }\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default Filter;\n","import { React } from 'react';\nimport { FormContainer } from './ContactForm.styled';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  useAddContactMutation,\n  useFetchContactsQuery,\n} from 'ContactsApi/contactsApi';\nimport { toast } from 'react-toastify';\nimport { useEffect } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { CircularProgress } from '@mui/material';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport FormHelperText from '@mui/material/FormHelperText';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required('Please enter a name'),\n  number: Yup.string().required('Please enter a number'),\n});\n\nconst ContactForm = ({ handleClose }) => {\n  const [addContact, { isLoading, isError, isSuccess }] =\n    useAddContactMutation();\n  const { data } = useFetchContactsQuery();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validate: values => {\n      const errors = {};\n      const numberPattern = /^[0-9\\b\\s+().*-\\s++]+$/;\n      const namePattern =\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n      if (!values.number) {\n        errors.number = 'Required';\n      } else if (!numberPattern.test(values.number)) {\n        errors.number =\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n      } else if (!values.name) {\n        errors.name = 'Required';\n      } else if (!namePattern.test(values.name)) {\n        errors.name =\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\";\n      }\n      return errors;\n    },\n    validationSchema: validationSchema,\n    onSubmit: async (values, { resetForm }) => {\n      const addedName = data\n        .map(contact => contact.name.toLowerCase())\n        .includes(values.name.toLowerCase());\n      if (addedName) {\n        return toast.error(`${values.name} is already in a list`);\n      } else {\n        await addContact({ ...values });\n        resetForm();\n        handleClose();\n      }\n    },\n  });\n\n  console.log(formik.errors);\n\n  useEffect(() => {\n    if (isSuccess) {\n      toast.success('Contact successfully added');\n    }\n\n    if (isError) {\n      toast.error(isError.data);\n    }\n  }, [isSuccess, isError]);\n\n  return (\n    <>\n      <FormContainer onSubmit={formik.handleSubmit}>\n        <FormControl\n          error={formik.errors.name}\n          sx={{ m: 1, width: '30ch' }}\n          variant=\"standard\"\n        >\n          <InputLabel htmlFor=\"name\">Name</InputLabel>\n          <Input\n            id=\"name\"\n            type=\"text\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            required\n          />\n          {formik.errors.name && (\n            <FormHelperText color=\"red\">{formik.errors.name}</FormHelperText>\n          )}\n        </FormControl>\n\n        <FormControl\n          error={formik.errors.number}\n          sx={{ m: 1, width: '30ch' }}\n          variant=\"standard\"\n        >\n          <InputLabel htmlFor=\"number\">Number</InputLabel>\n          <Input\n            // inputProps={{ inputMode: \"numeric\", pattern: \"[0-9]*\"}}\n            id=\"number\"\n            type=\"text\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            required\n          />\n          {formik.errors.number && (\n            <FormHelperText color=\"red\">{formik.errors.number}</FormHelperText>\n          )}\n          <ButtonGroup fullWidth sx={{ mt: 3 }}>\n            <LoadingButton\n              sx={{ mr: 0.3 }}\n              variant=\"contained\"\n              size=\"large\"\n              type=\"submit\"\n              loading={isLoading}\n              loadingPosition=\"center\"\n              loadingIndicator={<CircularProgress color=\"primary\" size={24} />}\n            >\n              Add\n            </LoadingButton>\n            <LoadingButton\n              variant=\"contained\"\n              size=\"large\"\n              type=\"button\"\n              onClick={handleClose}\n              loading={isLoading}\n              loadingPosition=\"center\"\n              loadingIndicator={<CircularProgress color=\"primary\" size={24} />}\n            >\n              Cancel\n            </LoadingButton>\n          </ButtonGroup>\n        </FormControl>\n      </FormContainer>\n      <Outlet />\n    </>\n  );\n};\n\nexport default ContactForm;\n","import { useSelector } from 'react-redux';\nimport { React } from 'react';\nimport { List } from '@mui/material';\nimport { useFetchContactsQuery } from 'ContactsApi/contactsApi';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { Outlet } from 'react-router-dom';\nimport Filter from 'components/Filter/Filter';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Box from '@mui/material/Box';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\nimport { useState } from 'react';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\n\nexport default function ContactList() {\n  const filter = useSelector(state => state.contacts.filter);\n  const { data } = useFetchContactsQuery();\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          flexGrow: 1,\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <Filter />\n        <Button\n          variant=\"contained\"\n          endIcon={<PersonAddIcon fontSize=\"inherit\" />}\n          onClick={handleClickOpen}\n          sx={{\n            width: '200px',\n            height: '42px',\n            '&:hover': { backgroundColor: '#1976d2ed' },\n          }}\n          color=\"primary\"\n        >\n          {' '}\n          Add contact\n        </Button>\n\n        <Dialog open={open} onClose={handleClose}>\n          <DialogTitle>Create contact</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              To create new contact please enter the name and the phone number\n              in corresponding field below and click \"Add\".\n            </DialogContentText>\n            <ContactForm handleClose={handleClose} />\n          </DialogContent>\n        </Dialog>\n      </Box>\n      <Box sx={{ flexGrow: 1 }}>\n        <List>\n          {data &&\n            data\n              .filter(\n                contact =>\n                  contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n                  contact.number.includes(filter)\n              )\n              .map(({ name, number, id }) => (\n                <ContactListItem name={name} number={number} key={id} id={id} />\n              ))}\n        </List>\n      </Box>\n\n      <Outlet />\n    </>\n  );\n}\n"],"names":["FormContainer","styled","validationSchema","Yup","shape","name","required","number","handleClose","id","useUpdateContactMutation","updateContact","isLoading","isError","isSuccess","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","useEffect","toast","data","Typography","variant","component","sx","mt","color","handleSubmit","FormControl","error","m","width","InputLabel","htmlFor","Input","type","value","onChange","handleChange","FormHelperText","ButtonGroup","fullWidth","LoadingButton","mr","size","loading","loadingPosition","loadingIndicator","CircularProgress","onClick","ContactListItem","useDeleteContactMutation","deleteContact","useState","open","setOpen","toggle","ListItem","ListItemAvatar","Avatar","bgcolor","ContactPhone","ListItemText","primary","secondary","Edit","Delete","Modal","onClose","Box","position","top","left","transform","boxShadow","p","dispatch","useDispatch","filter","useSelector","state","contacts","query","e","filterContacts","currentTarget","startAdornment","InputAdornment","Search","useAddContactMutation","addContact","useFetchContactsQuery","map","contact","toLowerCase","includes","console","log","ContactList","flexGrow","display","justifyContent","alignItems","Button","endIcon","PersonAdd","fontSize","height","backgroundColor","Dialog","DialogTitle","DialogContent","DialogContentText","List"],"sourceRoot":""}